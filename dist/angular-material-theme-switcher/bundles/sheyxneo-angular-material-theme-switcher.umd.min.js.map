{"version":3,"sources":["ng://@sheyxneo/angular-material-theme-switcher/lib/service/am-theme.service.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/component/color-switcher/color-switcher.component.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/component/dark-switcher/dark-switcher.component.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/directive/container.directive.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/directive/active.directive.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/directive/custom.directive.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/directive/dark.directive.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/directive/light.directive.ts","ng://@sheyxneo/angular-material-theme-switcher/lib/angular-material-theme-switcher.module.ts"],"names":["AmThemeService","this","themes","colorTheme$","BehaviorSubject","isDark$","Injectable","ColorSwitcherComponent","amThemeService","colorTheme","isUseLibraryThemes","prototype","ngOnInit","_this","forEach","push","subscribe","indexOf","next","setColorTheme","Component","args","selector","template","Input","DarkSwitcherComponent","isDark","toggleIsDark","ContainerDirective","overlayContainer","setTheme","theme","themeActiveCssClass","overlayClassList","getContainerElement","classList","contains","oldTheme","replace","add","Directive","OverlayContainer","HostBinding","ActiveDirective","CustomDirective","DarkDirective","LightDirective","AngularMaterialThemeSwitcherModule","NgModule","declarations","providers","imports","CommonModule","OverlayModule","MatButtonModule","MatGridListModule","MatIconModule","MatMenuModule","MatSlideToggleModule","MatTooltipModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class AmThemeService {\n\n  themes: string[] = [\n    'deeppurple-amber',\n    'indigo-pink',\n    'pink-bluegrey',\n    'purple-green',\n  ];\n\n  colorTheme$ = new BehaviorSubject<string>('indigo-pink');\n  isDark$ = new BehaviorSubject<boolean>(false);\n\n  constructor() { }\n\n}\n","import {\n  Component,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { AmThemeService } from '../../service/am-theme.service';\n\n@Component({\n  selector: 'am-theme-color-switcher',\n  templateUrl: './color-switcher.component.html',\n  styleUrls: ['./color-switcher.component.css']\n})\nexport class ColorSwitcherComponent implements OnInit {\n\n  @Input() colorTheme: string = '';\n\n  @Input() themes: string[] = [];\n\n  @Input() isUseLibraryThemes: boolean = true;\n\n  constructor(private amThemeService: AmThemeService) { }\n\n  ngOnInit() {\n    if (this.isUseLibraryThemes) {\n      this.amThemeService.themes.forEach(colorTheme => this.themes.push(colorTheme));\n\n      if (this.colorTheme === '') {\n        this.amThemeService.colorTheme$.subscribe(colorTheme => this.colorTheme = colorTheme);\n      }\n    } else {\n      if (this.colorTheme === '') {\n        this.colorTheme = this.themes[0];\n      }\n    }\n\n    if (this.themes.indexOf(this.colorTheme) === -1) {\n      this.themes.push(this.colorTheme);\n    }\n\n    if (this.colorTheme !== '') {\n      this.amThemeService.colorTheme$.next(this.colorTheme);\n    }\n  }\n\n  setColorTheme(colorTheme: string) {\n    this.amThemeService.colorTheme$.next(colorTheme);\n    this.colorTheme = colorTheme;\n  }\n\n}\n","import {\n  Component,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { AmThemeService } from '../../service/am-theme.service';\n\n@Component({\n  selector: 'am-theme-dark-switcher',\n  templateUrl: './dark-switcher.component.html',\n  styleUrls: ['./dark-switcher.component.css']\n})\nexport class DarkSwitcherComponent implements OnInit {\n\n  @Input() isDark: boolean = false;\n\n  constructor(private amThemeService: AmThemeService) { }\n\n  ngOnInit() {\n    this.amThemeService.isDark$.next(this.isDark);\n  }\n\n  toggleIsDark(isDark: boolean) {\n    this.amThemeService.isDark$.next(isDark);\n  }\n\n}\n","import {\n  Directive,\n  HostBinding,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { OverlayContainer } from '@angular/cdk/overlay';\n\nimport { AmThemeService } from '../service/am-theme.service';\n\n@Directive({\n  selector: '[amThemeContainer]'\n})\nexport class ContainerDirective implements OnInit {\n\n  oldTheme: string;\n\n  @Input() colorTheme: string = '';\n\n  @Input() isDark: boolean;\n\n  @HostBinding('class') themeActiveCssClass;\n\n  constructor(\n    private overlayContainer: OverlayContainer,\n    private amThemeService: AmThemeService\n  ) { }\n\n  ngOnInit() {\n    if (this.colorTheme !== '') {\n      if (typeof this.isDark !== 'undefined') {\n        this.setTheme(this.colorTheme, this.isDark);\n      } else {\n        this.amThemeService.isDark$.subscribe((isDark) => {\n          this.setTheme(this.colorTheme, isDark);\n        });\n      }\n    } else {\n      this.amThemeService.colorTheme$.subscribe((colorTheme) => {\n        if (typeof this.isDark !== 'undefined') {\n          this.setTheme(colorTheme, this.isDark);\n        } else {\n          this.amThemeService.isDark$.subscribe((isDark) => {\n            this.setTheme(colorTheme, isDark);\n          });\n        }\n      });\n    }\n  }\n\n  setTheme(colorTheme, isDark) {\n    let theme = colorTheme + (isDark ? '-dark' : '-light');\n\n    this.themeActiveCssClass = theme;\n\n    const overlayClassList = this.overlayContainer.getContainerElement().classList\n    if (overlayClassList.contains(this.oldTheme)) {\n      overlayClassList.replace(this.oldTheme, theme)\n    }\n    else {\n      overlayClassList.add(theme)\n    }\n\n    this.oldTheme = theme;\n  }\n\n}\n","import {\n  Directive,\n  HostBinding,\n  OnInit\n} from '@angular/core';\n\nimport { OverlayContainer } from '@angular/cdk/overlay';\n\nimport { AmThemeService } from '../service/am-theme.service';\n\n@Directive({\n  selector: '[amThemeActive]'\n})\nexport class ActiveDirective implements OnInit {\n\n  oldTheme: string;\n\n  @HostBinding('class') themeActiveCssClass;\n\n  constructor(\n    private overlayContainer: OverlayContainer,\n    private amThemeService: AmThemeService\n  ) { }\n\n  ngOnInit() {\n    this.amThemeService.colorTheme$.subscribe((colorTheme) => {\n      this.amThemeService.isDark$.subscribe((isDark) => {\n        this.setTheme(colorTheme, isDark);\n      });\n    });\n  }\n\n  setTheme(colorTheme, isDark) {\n    let theme = colorTheme + (isDark ? '-dark' : '-light');\n\n    this.themeActiveCssClass = theme;\n\n    const overlayClassList = this.overlayContainer.getContainerElement().classList\n    if (overlayClassList.contains(this.oldTheme)) {\n      overlayClassList.replace(this.oldTheme, theme)\n    }\n    else {\n      overlayClassList.add(theme)\n    }\n\n    this.oldTheme = theme;\n  }\n\n}\n","import {\n  Directive,\n  HostBinding,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { OverlayContainer } from '@angular/cdk/overlay';\n@Directive({\n  selector: '[amThemeCustom]'\n})\nexport class CustomDirective implements OnInit {\n\n  oldTheme: string;\n\n  @Input() colorTheme: string = '';\n\n  @Input() isDark: boolean = false;\n\n  @HostBinding('class') themeActiveCssClass;\n\n  constructor(\n    private overlayContainer: OverlayContainer\n  ) { }\n\n  ngOnInit() {\n    this.setTheme(this.colorTheme, this.isDark);\n  }\n\n  setTheme(colorTheme, isDark) {\n    let theme = colorTheme + (isDark ? '-dark' : '-light');\n\n    this.themeActiveCssClass = theme;\n\n    const overlayClassList = this.overlayContainer.getContainerElement().classList\n    if (overlayClassList.contains(this.oldTheme)) {\n      overlayClassList.replace(this.oldTheme, theme)\n    }\n    else {\n      overlayClassList.add(theme)\n    }\n\n    this.oldTheme = theme;\n  }\n\n}\n","import {\n  Directive,\n  HostBinding,\n  OnInit\n} from '@angular/core';\n\nimport { OverlayContainer } from '@angular/cdk/overlay';\n\nimport { AmThemeService } from '../service/am-theme.service';\n\n@Directive({\n  selector: '[amThemeDark]'\n})\nexport class DarkDirective implements OnInit {\n\n  oldTheme: string;\n\n  @HostBinding('class') themeActiveCssClass;\n\n  constructor(\n    private overlayContainer: OverlayContainer,\n    private amThemeService: AmThemeService\n  ) { }\n\n  ngOnInit() {\n    this.amThemeService.colorTheme$.subscribe((colorTheme) => {\n      this.setTheme(colorTheme);\n    });\n  }\n\n  setTheme(colorTheme) {\n    let theme = colorTheme + '-dark';\n\n    this.themeActiveCssClass = theme;\n\n    const overlayClassList = this.overlayContainer.getContainerElement().classList\n    if (overlayClassList.contains(this.oldTheme)) {\n      overlayClassList.replace(this.oldTheme, theme)\n    }\n    else {\n      overlayClassList.add(theme)\n    }\n\n    this.oldTheme = theme;\n  }\n\n}\n","import {\n  Directive,\n  HostBinding,\n  OnInit\n} from '@angular/core';\n\nimport { OverlayContainer } from '@angular/cdk/overlay';\n\nimport { AmThemeService } from '../service/am-theme.service';\n\n@Directive({\n  selector: '[amThemeLight]'\n})\nexport class LightDirective implements OnInit {\n\n  oldTheme: string;\n\n  @HostBinding('class') themeActiveCssClass;\n\n  constructor(\n    private overlayContainer: OverlayContainer,\n    private amThemeService: AmThemeService\n  ) { }\n\n  ngOnInit() {\n    this.amThemeService.colorTheme$.subscribe((colorTheme) => {\n      this.setTheme(colorTheme);\n    });\n  }\n\n  setTheme(colorTheme) {\n    let theme = colorTheme + '-light';\n\n    this.themeActiveCssClass = theme;\n\n    const overlayClassList = this.overlayContainer.getContainerElement().classList\n    if (overlayClassList.contains(this.oldTheme)) {\n      overlayClassList.replace(this.oldTheme, theme)\n    }\n    else {\n      overlayClassList.add(theme)\n    }\n\n    this.oldTheme = theme;\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport {\n  MatButtonModule,\n  MatGridListModule,\n  MatIconModule,\n  MatMenuModule,\n  MatSlideToggleModule,\n  MatTooltipModule\n} from '@angular/material';\n\nimport { OverlayModule } from \"@angular/cdk/overlay\";\n\nimport { ColorSwitcherComponent } from './component/color-switcher/color-switcher.component';\nimport { DarkSwitcherComponent } from './component/dark-switcher/dark-switcher.component';\n\nimport { ContainerDirective } from './directive/container.directive';\nimport { ActiveDirective } from './directive/active.directive';\nimport { CustomDirective } from './directive/custom.directive';\nimport { DarkDirective } from './directive/dark.directive';\nimport { LightDirective } from './directive/light.directive';\n\nimport { AmThemeService } from './service/am-theme.service';\n\n\n@NgModule({\n  declarations: [\n    ColorSwitcherComponent,\n    DarkSwitcherComponent,\n    ContainerDirective,\n    ActiveDirective,\n    CustomDirective,\n    DarkDirective,\n    LightDirective\n  ],\n  providers: [\n    AmThemeService\n  ],\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatButtonModule,\n    MatGridListModule,\n    MatIconModule,\n    MatMenuModule,\n    MatSlideToggleModule,\n    MatTooltipModule\n  ],\n  exports: [\n    ColorSwitcherComponent,\n    DarkSwitcherComponent,\n    ContainerDirective,\n    ActiveDirective,\n    CustomDirective,\n    DarkDirective,\n    LightDirective\n  ]\n})\nexport class AngularMaterialThemeSwitcherModule { }\n"]}